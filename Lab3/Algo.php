<?php

namespace Lab3;

use Illuminate\Support\Str;
use LogicException;

/**
 * DES
 */
class Algo
{
	private const SBox1 = [0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004];
	private const SBox2 = [-0x7FEF7FE0, -0x7FFF8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7FEFFFE0, -0x7FFF7FE0, -0x7FFFFFE0, -0x7FEF7FE0, -0x7FEF8000, -0x80000000, -0x7FFF8000, 0x100000, 0x20, -0x7FEFFFE0, 0x108000, 0x100020, -0x7FFF7FE0, 0, -0x80000000, 0x8000, 0x108020, -0x7FF00000, 0x100020, -0x7FFFFFE0, 0, 0x108000, 0x8020, -0x7FEF8000, -0x7FF00000, 0x8020, 0, 0x108020, -0x7FEFFFE0, 0x100000, -0x7FFF7FE0, -0x7FF00000, -0x7FEF8000, 0x8000, -0x7FF00000, -0x7FFF8000, 0x20, -0x7FEF7FE0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7FEF8000, 0x100000, -0x7FFFFFE0, 0x100020, -0x7FFF7FE0, -0x7FFFFFE0, 0x100020, 0x108000, 0, -0x7FFF8000, 0x8020, -0x80000000, -0x7FEFFFE0, -0x7FEF7FE0, 0x108000];
	private const SBox3 = [0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200];
	private const SBox4 = [0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080];
	private const SBox5 = [0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100];
	private const SBox6 = [0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010];
	private const SBox7 = [0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002];
	private const SBox8 = [0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000];
	private const Masks = [4294967295, 2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151, 1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0];

	private readonly array $keys;

	public function __construct(private readonly string $key)
	{
		$this->keys = $this->createKeys($this->key);
	}

	public function encrypt(string $message): string
	{
		return $this->des($message, true);
	}

	public function decrypt(string $message): string
	{
		return rtrim($this->des($message, false));
	}

	protected function des(string $message, bool $encrypt): string
	{
		$m = 0;
		$len = mb_strlen($message);
		$chunk = 0;
		$iterations = ((count($this->keys) == 32) ? 3 : 9);

		if ($iterations == 3) {
			$looping = ($encrypt ? [0, 32, 2] : [30, -2, -2]);
		} else {
			$looping = ($encrypt ? [0, 32, 2, 62, 30, -2, 64, 96, 2] : [94, 62, -2, 32, 64, 2, 30, -2, -2]);
		}

		$message .= '        ';

		$result = '';
		$tempresult = '';

		while ($m < $len) {
			$left = (ord($message[$m++]) << 24) | (ord($message[$m++]) << 16) | (ord($message[$m++]) << 8) | ord($message[$m++]);
			$right = (ord($message[$m++]) << 24) | (ord($message[$m++]) << 16) | (ord($message[$m++]) << 8) | ord($message[$m++]);

			$temp = (($left >> 4 & self::Masks[4]) ^ $right) & 0x0F0F0F0F;
			$right ^= $temp;
			$left ^= ($temp << 4);
			$temp = (($left >> 16 & self::Masks[16]) ^ $right) & 0x0000FFFF;
			$right ^= $temp;
			$left ^= ($temp << 16);
			$temp = (($right >> 2 & self::Masks[2]) ^ $left) & 0x33333333;
			$left ^= $temp;
			$right ^= ($temp << 2);
			$temp = (($right >> 8 & self::Masks[8]) ^ $left) & 0x00FF00FF;
			$left ^= $temp;
			$right ^= ($temp << 8);
			$temp = (($left >> 1 & self::Masks[1]) ^ $right) & 0x55555555;
			$right ^= $temp;
			$left ^= ($temp << 1);

			$left = (($left << 1) | ($left >> 31 & self::Masks[31]));
			$right = (($right << 1) | ($right >> 31 & self::Masks[31]));

			for ($j = 0; $j < $iterations; $j += 3) {
				$endloop = $looping[$j + 1];
				$loopinc = $looping[$j + 2];

				for ($i = $looping[$j]; $i != $endloop; $i += $loopinc) {
					$right1 = $right ^ $this->keys[$i];
					$right2 = (($right >> 4 & self::Masks[4]) | ($right << 28 & 0xFFFFFFFF)) ^ $this->keys[$i + 1];
					$temp = $left;
					$left = $right;
					$right = $temp ^ (self::SBox2[($right1 >> 24 & self::Masks[24]) & 0x3F] | self::SBox4[($right1 >> 16 & self::Masks[16]) & 0x3F]
							| self::SBox6[($right1 >> 8 & self::Masks[8]) & 0x3F] | self::SBox8[$right1 & 0x3F]
							| self::SBox1[($right2 >> 24 & self::Masks[24]) & 0x3F] | self::SBox3[($right2 >> 16 & self::Masks[16]) & 0x3F]
							| self::SBox5[($right2 >> 8 & self::Masks[8]) & 0x3F] | self::SBox7[$right2 & 0x3F]);
				}
				$temp = $left;
				$left = $right;
				$right = $temp;
			}

			$left = (($left >> 1 & self::Masks[1]) | ($left << 31));
			$right = (($right >> 1 & self::Masks[1]) | ($right << 31));

			$temp = (($left >> 1 & self::Masks[1]) ^ $right) & 0x55555555;
			$right ^= $temp;
			$left ^= ($temp << 1);
			$temp = (($right >> 8 & self::Masks[8]) ^ $left) & 0x00FF00FF;
			$left ^= $temp;
			$right ^= ($temp << 8);
			$temp = (($right >> 2 & self::Masks[2]) ^ $left) & 0x33333333;
			$left ^= $temp;
			$right ^= ($temp << 2);
			$temp = (($left >> 16 & self::Masks[16]) ^ $right) & 0x0000FFFF;
			$right ^= $temp;
			$left ^= ($temp << 16);
			$temp = (($left >> 4 & self::Masks[4]) ^ $right) & 0x0F0F0F0F;
			$right ^= $temp;
			$left ^= ($temp << 4);

			$tempresult .= (chr($left >> 24 & self::Masks[24]) . chr(($left >> 16 & self::Masks[16]) & 0xFF) . chr(($left >> 8 & self::Masks[8]) & 0xFF) . chr($left & 0xFF) . chr($right >> 24 & self::Masks[24]) . chr(($right >> 16 & self::Masks[16]) & 0xFF) . chr(($right >> 8 & self::Masks[8]) & 0xFF) . chr($right & 0xFF));

			$chunk += 8;

			if ($chunk == 512) {
				$result .= $tempresult;
				$tempresult = '';
				$chunk = 0;
			}
		}

		return $result . $tempresult;
	}

	private function createKeys(string $key): array
	{
		//declaring this locally speeds things up a bit
		$pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204];
		$pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101];
		$pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808];
		$pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000];
		$pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010];
		$pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420];
		$pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002];
		$pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800];
		$pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002];
		$pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408];
		$pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020];
		$pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200];
		$pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010];
		$pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105];

		$iterations = ((mb_strlen($key) > 8) ? 3 : 1);
		$keys = [];
		$shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];
		$m = 0;
		$n = 0;

		for ($j = 0; $j < $iterations; $j++) { //either 1 or 3 iterations
			$left = (ord($key[$m++]) << 24) | (ord($key[$m++]) << 16) | (ord($key[$m++]) << 8) | ord($key[$m++]);
			$right = (ord($key[$m++]) << 24) | (ord($key[$m++]) << 16) | (ord($key[$m++]) << 8) | ord($key[$m++]);

			$temp = (($left >> 4 & self::Masks[4]) ^ $right) & 0x0F0F0F0F;
			$right ^= $temp;
			$left ^= ($temp << 4);
			$temp = (($right >> 16 & self::Masks[16]) ^ $left) & 0x0000FFFF;
			$left ^= $temp;
			$right ^= ($temp << 16);
			$temp = (($left >> 2 & self::Masks[2]) ^ $right) & 0x33333333;
			$right ^= $temp;
			$left ^= ($temp << 2);
			$temp = (($right >> 16 & self::Masks[16]) ^ $left) & 0x0000FFFF;
			$left ^= $temp;
			$right ^= ($temp << 16);
			$temp = (($left >> 1 & self::Masks[1]) ^ $right) & 0x55555555;
			$right ^= $temp;
			$left ^= ($temp << 1);
			$temp = (($right >> 8 & self::Masks[8]) ^ $left) & 0x00FF00FF;
			$left ^= $temp;
			$right ^= ($temp << 8);
			$temp = (($left >> 1 & self::Masks[1]) ^ $right) & 0x55555555;
			$right ^= $temp;
			$left ^= ($temp << 1);

			//the right side needs to be shifted and to get the last four bits of the left side
			$temp = ($left << 8) | (($right >> 20 & self::Masks[20]) & 0x000000F0);
			//left needs to be put upside down
			$left = ($right << 24) | (($right << 8) & 0xFF0000) | (($right >> 8 & self::Masks[8]) & 0xFF00) | (($right >> 24 & self::Masks[24]) & 0xF0);
			$right = $temp;

			//now go through and perform these shifts on the left and right keys
			for ($i = 0; $i < count($shifts); $i++) {
				//shift the keys either one or two bits to the left
				if ($shifts[$i] > 0) {
					$left = (($left << 2) | ($left >> 26 & self::Masks[26]));
					$right = (($right << 2) | ($right >> 26 & self::Masks[26]));
				} else {
					$left = (($left << 1) | ($left >> 27 & self::Masks[27]));
					$right = (($right << 1) | ($right >> 27 & self::Masks[27]));
				}
				$left = $left & -0xF;
				$right = $right & -0xF;

				$leftTemp = $pc2bytes0[$left >> 28 & self::Masks[28]] | $pc2bytes1[($left >> 24 & self::Masks[24]) & 0xF]
					| $pc2bytes2[($left >> 20 & self::Masks[20]) & 0xF] | $pc2bytes3[($left >> 16 & self::Masks[16]) & 0xF]
					| $pc2bytes4[($left >> 12 & self::Masks[12]) & 0xF] | $pc2bytes5[($left >> 8 & self::Masks[8]) & 0xF]
					| $pc2bytes6[($left >> 4 & self::Masks[4]) & 0xF];
				$rightTemp = $pc2bytes7[$right >> 28 & self::Masks[28]] | $pc2bytes8[($right >> 24 & self::Masks[24]) & 0xF]
					| $pc2bytes9[($right >> 20 & self::Masks[20]) & 0xF] | $pc2bytes10[($right >> 16 & self::Masks[16]) & 0xF]
					| $pc2bytes11[($right >> 12 & self::Masks[12]) & 0xF] | $pc2bytes12[($right >> 8 & self::Masks[8]) & 0xF]
					| $pc2bytes13[($right >> 4 & self::Masks[4]) & 0xF];
				$temp = (($rightTemp >> 16 & self::Masks[16]) ^ $leftTemp) & 0x0000FFFF;
				$keys[$n++] = $leftTemp ^ $temp;
				$keys[$n++] = $rightTemp ^ ($temp << 16);
			}
		}

		return $keys;
	}
}
